package main

import (
	"fmt"
)

func main() {
	// 指针
	// 基本数据类型在内存中的布局
	var i int = 10
	// 获取变量的地址, 用& ,比如:  var num int  获取num 地址: &num
	fmt.Println(&i)
	// 指针类型: 指针变量存的是一个地址, 这个地址指向的空间才是值4,
	var ptr *int = &i      // 这里村的是地址
	fmt.Println(ptr, *ptr) // 输出的是地址 以及地址指向的值

	// 值类型和引用数据类型
	// 值类型: 基本数据类型int系列, float系列 bool string 数组 和结构体
	// 值类型都有地址类型,
	// 值类型: 变量直接存储值, 内存通常在栈中进行分配

	// 引用数据类型: 指针, slice切片, map, 管道chan, interface等 都是引用数据类型
	// 引用类型: 变量存储的是一个地址, 这个地址对应的空间才存储真正的数据, 内存通常在堆中进行分配, 当没有
	// 任何变量引用这个地址时, 该地址对应的数据就变成了垃圾, 被GC垃圾回收机制回收

	// 特殊条件时: 逃逸分析

}
